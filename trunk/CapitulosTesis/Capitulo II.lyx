#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
ARMAR ESQUELETO DEL CAPITULO POR AHORA QUEDO
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
* Motivacion (sacado del plan)
\begin_inset Newline newline
\end_inset

* Problematica (sacado del plan)
\begin_inset Newline newline
\end_inset

* Aspectos Tempranos
\end_layout

\begin_layout Plain Layout
* Casos de Uso
\begin_inset Newline newline
\end_inset

---- Especificacion
\begin_inset Newline newline
\end_inset

---- Ventajas
\begin_inset Newline newline
\end_inset

---- Template
\begin_inset Newline newline
\end_inset

---- Casos de Uso y atributos de calidad
\end_layout

\begin_layout Plain Layout
Atributos de Calidad
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Part
Dominio
\end_layout

\begin_layout Standard
En este capitulo bla bla bla
\end_layout

\begin_layout Section
Motivacion
\end_layout

\begin_layout Standard
La calidad de software se define como el grado en el cual el software posee
 una combinación deseada de atributos, tales como: performance, disponibilidad,
 portabilidad, seguridad, usabilidad, etc.
 [1].
 Estos atributos son requerimientos adicionales del sistema [11] que hacen
 referencia a características o restricciones que éste debe satisfacer,
 y complementan los requerimientos funcionales del sistema.
 Estas características o atributos se conocen con el nombre de atributos
 de calidad [9].
 En términos generales, Bass y otros autores [10] establece una clasificación
 de los atributos de calidad en dos categorías: 
\end_layout

\begin_layout Itemize
Observables en tiempo de ejecución: aquellos atributos que se determinan
 del comportamiento del sistema en tiempo de ejecución (disponibilidad,
 performance, seguridad, etc.) 
\end_layout

\begin_layout Itemize
No observables en tiempo de ejecución: aquellos atributos que se establecen
 durante el desarrollo del sistema (modificabilidad, reusabilidad, portabilidad,
 escabilidad, etc.).
 
\end_layout

\begin_layout Standard
Estos atributos de calidad son especificados a través de requerimientos
 de atributos de calidad (quality-attribute requirements), en adelante denominad
os QARs.
 Los QARs juegan un rol crítico en el desarrollo de un sistema y guían el
 diseño arquitectónico.
 Por lo tanto, deben ser considerados y especificados en etapas tempranas
 del desarrollo [3].
 Existen evidencias de la relación entre QARs correctamente especificados
 y el éxito de un sistema [4].
 Por ejemplo, las consecuencias de una especificación equivocada de performance
 pueden variar considerablemente, incluyendo: relaciones dañadas con el
 cliente, fallas en el negocio, pérdida de ingresos, aumento del costo del
 proyecto debido a los costos de sumar recursos adicionales para resolver
 la falla, reducción de la competencia y, potencialmente, contribuir al
 fracaso del proyecto.
 En este contexto, los QARs son comúnmente señalados como un factor clave
 de éxito en la construcción de software de calidad, estableciendo un enfoque
 sistemático y pragmático para introducir calidad en los sistemas de software
 [5].
 Un concepto relacionado con los QARs es el de aspectos tempranos (early
 aspects).
 Un aspecto temprano es un concern que atraviesa el diseño de un sistema
 [8], y se manifiesta generalmente en las especificaciones de requerimientos
 u otros documentos preliminares producidos en el análisis de requerimientos.
 Muchos aspectos tempranos se corresponden con QARs de alto nivel como seguridad
, performance, portabilidad y usabilidad [3].
 En consecuencia, el descubrimiento de early aspects puede proporcionar
 pistas para identificar QARs.
 Los casos de uso son una de las técnicas más comunes para especificar los
 requerimientos de un sistema [4].
 Un caso de uso es una tarea, que describe el comportamiento del sistema,
 originada a partir de una acción de un usuario final, que tiene un resultado
 [13].
\end_layout

\begin_layout Section
Problemática
\end_layout

\begin_layout Standard
Mientras que los requerimientos funcionales han recibido considerable atención
 en la literatura, los QARs, de una arquitectura de software han recibido
 un menor interés [4].
 Dado que los QARs juegan un rol crítico en el diseño de la arquitectura,
 la detección temprana de estos atributos de calidad es crucial para tomarlos
 en consideración desde las primeras decisiones de diseño.
 A pesar de que parece una tarea sencilla, la identificación y priorización
 de atributos de calidad puede resultar dificultosa para un analista e insumir
 mucho tiempo.
 En la práctica, la mayoría de QARs están, de alguna forma, “ocultos” entre
 los requerimientos que especifican la funcionalidad y por ello tienden
 a ser ignorados [6].
 Tal es así que, a diferencia de los requerimientos funcionales, los requerimien
tos no funcionales (QARs) son muy difíciles de elicitar [7].
 Las especificaciones de requerimientos tienden a ser organizadas en base
 a la funcionalidad, con los QARs dispersos en varios documentos.
 Esto puede llevar a una serie de problemas importantes como conflictos
 no detectados, soluciones arquitectónicas que no toman en cuenta las limitacion
es críticas de calidad, y desarrollo de productos que no llegan a satisfacer
 las necesidades reales de los stakeholders.[3].
 Por esta razón, el desarrollo de herramientas que asistan a analistas a
 identificar atributos de calidad en especificaciones de requerimientos
 (por ej., casos de uso), y permitan establecer trazabilidad entre dichos
 atributos de calidad y los requerimientos y posteriores decisiones de diseño
 arquitectónico son de gran utilidad.
 
\end_layout

\begin_layout Section
Aspectos Tempranos 
\end_layout

\begin_layout Standard
Sacar de la tesis de Alejandro.
\end_layout

\begin_layout Section
Casos de uso
\end_layout

\begin_layout Standard
En ingeniería del software, un caso de uso es una técnica para la captura
 de requisitos potenciales de un nuevo sistema o una actualización de software.
 Cada caso de uso proporciona uno o más escenarios que indican cómo debería
 interactuar el sistema con el usuario o con otro sistema para conseguir
 un objetivo específico.
 Normalmente, en los casos de usos se evita el empleo de jergas técnicas,
 prefiriendo en su lugar un lenguaje más cercano al usuario final.
 En ocasiones, se utiliza a usuarios sin experiencia junto a los analistas
 para el desarrollo de casos de uso.
\end_layout

\begin_layout Standard
Los casos de uso se convirtieron en una de las prácticas más comunes para
 la captura de requisitos funcionales, especialmente con el desarrollo del
 paradigma de la programación orientada a objetos.
\end_layout

\begin_layout Subsection
Especificación de un requerimiento mediante casos de uso (o Aplicación)
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
ver titulo
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los casos de uso evitan típicamente la jerga técnica, prefiriendo la lengua
 del usuario final o del experto del campo del saber al que se va a aplicar.
 Los casos del uso son a menudo elaborados en colaboración por los analistas
 de requerimientos y los clientes.
 Cada caso de uso se centra en describir cómo alcanzar una única meta o
 tarea de negocio.
 
\end_layout

\begin_layout Standard
Desde una perspectiva tradicional de la ingeniería de software, un caso
 de uso describe una característica del sistema.
 Para la mayoría de proyectos de software, esto significa que quizás a veces
 es necesario especificar diez o centenares de casos de uso para definir
 completamente el nuevo sistema.
 El grado de la formalidad de un proyecto particular del software y de la
 etapa del proyecto influenciará el nivel del detalle requerido en cada
 caso de uso.
 Los casos de uso pretenden ser herramientas simples para describir el comportam
iento del software o de los sistemas.
 Un caso del uso contiene una descripción textual de todas las maneras que
 los actores previstos podrían trabajar con el software o el sistema.
 Los casos de uso no describen ninguna funcionalidad interna (oculta al
 exterior) del sistema, ni explican cómo se implementará.
 Simplemente muestran los pasos que el actor sigue para realizar una tarea.
\end_layout

\begin_layout Standard
Un caso de uso debe:
\end_layout

\begin_layout Itemize
tener un nivel apropiado del detalle;
\end_layout

\begin_layout Itemize
describir una tarea del negocio que sirva a una meta de negocio;
\end_layout

\begin_layout Itemize
ser bastante sencillo como que un desarrollador lo elabore en un único lanzamien
to.
\end_layout

\begin_layout Subsection
Ventajas 
\end_layout

\begin_layout Itemize
La técnica de caso de uso tiene éxito en sistemas interactivos, ya que expresa
 la intención que tiene el actor (su usuario) al hacer uso del sistema.
 
\end_layout

\begin_layout Itemize
Como técnica de extracción de requerimiento permite que el analista se centre
 en las necesidades del usuario, qué espera éste lograr al utilizar el sistema,
 evitando que la gente especializada en informática dirija la funcionalidad
 del nuevo sistema basándose solamente en criterios tecnológicos.
 
\end_layout

\begin_layout Itemize
A su vez, durante la extracción (elicitation en inglés), el analista se
 concentra en las tareas centrales del usuario describiendo por lo tanto
 los casos de uso que mayor valor aportan al negocio.
 Esto facilita luego la priorización del requerimiento.
\end_layout

\begin_layout Subsection
Template de Rational 
\begin_inset Note Note
status open

\begin_layout Subsubsection
revisar bien este template y explicar cada sección
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Secciones
\end_layout

\begin_layout Itemize
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features islongtable="true">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sección
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decripción
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nombre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of the use case.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Descripción
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The description should briefly convey the role and purpose of the use case.
 A single paragraph should suffice for this description.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Flujo de Eventos
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This use case starts when the actor does something.
 An actor always initiates use Cases.
 The use case should describe what the actor does and what the system does
 in response.
 It should be phrased in the form of a dialog between the actor and the
 system.
 The use case should describe what happens inside the system, but not how
 or why.
 If information is exchanged, be specific about what is passed back and
 forth.
 For example, it is not very illuminating to say that the Actor enters customer
 information.
 It is better to say the Actor enters the customer’s name and address.
 A Glossary of Terms is often useful to keep the complexity of the use case
 manageable - you may want to define things like customer information there
 to keep the use case from drowning in details.
 Simple alternatives may be presented within the text of the use case.
 If it only takes a few sentences to describe what happens when there is
 an alternative, do it directly within the Flow of Events section.
 If the alternative flows are more complex, use a separate section to describe
 it.
 For example, an Alternative Flow subsection explains how to describe more
 complex alternatives.
 A picture is sometimes worth a thousand words, though there is no substitute
 for clean, clear prose.
 If it improves clarity, feel free to paste graphical depictions of user
 interfaces, process flows or other figures into the use case.
 If a flow chart is useful to present a complex decision process, by all
 means use it! Similarly for state-dependent behavior, a state-transition
 diagram often clarifies the behavior of a system better than pages upon
 pages of text.
 Use the right presentation medium for your problem, but be wary of using
 terminology, notations or figures that your audience may not understand.
 Remember that your purpose is to clarify, not obscure.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requerimientos Especiales
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A special requirement is typically a non-functional requirement that is
 specific to a use case, but is not easily or naturally specified in the
 text of the use case’s event flow.
 Examples of special requirements include legal and regulatory requirements,
 application standards, and quality attributes of the system to be built
 including usability, reliability, performance or supportability requirements.
 Additionally, other requirements-such as operating systems and environments,
 compatibility requirements, and design constraints-should be captured in
 this section.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Precondiciones
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A pre-condition of a use case is the state of the system that must be present
 prior to a use case being performed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Postcondiciones
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A post-condition of a use case is a list of possible states the system can
 be in immediately after a use case has finished
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Puntos de Extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extension points of the use case.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Relaciones
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Definition of the location of the extension point in the flow of events.
 Definition of the location of the extension point in the flow of events.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Secciones de la especifiación textual de Uso de Caso de RUP
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Casos de Uso y Requerimientos No Funcionales o ATRIBUTOS DE CALIDAD 
\begin_inset Note Note
status open

\begin_layout Plain Layout
ver titulo, aca deberia introducir atributos de calidad
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los casos de uso pueden ser útiles para establecer requisitos de comportamiento,
 pero no establecen completamente los requisitos funcionales ni permiten
 determinar los requisitos no funcionales.
 Los casos de uso deben complementarse con información adicional como reglas
 de negocio, requisitos no funcionales, diccionario de datos que complementen
 los requerimientos del sistema.
 Sin embargo la ingeniería del funcionamiento especifica que cada caso crítico
 del uso debe tener un requisito no funcional centrado en el funcionamiento
 asociado.
 
\end_layout

\begin_layout Section
Atributos de Calidad
\end_layout

\end_body
\end_document
